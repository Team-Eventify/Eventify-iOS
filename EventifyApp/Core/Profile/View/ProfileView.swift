//
//  Profile.swift
//  EventifyApp
//
//  Created by –ó–∞—Ö–∞—Ä –õ–∏—Ç–≤–∏–Ω—á—É–∫ on 03.07.2024.
//

import SwiftUI
import WishKit

/// –í—å—é —ç–∫—Ä–∞–Ω–∞ "–ü—Ä–æ—Ñ–∏–ª—å"
struct ProfileView: View {
	// MARK: - Private Properties

	@StateObject private var viewModel = ProfileViewModel()
	@State var showingDeleteAlert: Bool = false
	@State var showingExitAlert: Bool = false
	@State var navigateToSignUp: Bool = false

	// MARK: - Initialization

	/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
	/// - Parameter viewModel: –º–æ–¥–µ–ª—å —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è
	init(viewModel: ProfileViewModel? = nil) {
		_viewModel = StateObject(
			wrappedValue: viewModel ?? ProfileViewModel()
		)
        WishKit.configure(with: "C55735FB-7D7F-47AC-8562-C7486907DD08")
        WishKit.theme.primaryColor = .brandCyan
        WishKit.config.localization.implemented = "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
        WishKit.config.localization.approved = "–û–¥–æ–±—Ä–µ–Ω–æ"
        WishKit.config.localization.cancel = "–û—Ç–º–µ–Ω–∞"
        WishKit.config.localization.createWish = "–°–æ–∑–¥–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ"
        WishKit.config.localization.detail = "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
	}

	// MARK: - Body

	var body: some View {
		NavigationStack {
			VStack {
				header
				List {
					Section {
						NavigationLink {
							AddEventView()
						} label: {
							Text("–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
						}
					}

					Section {
						NavigationLink {
							TestView()
						} label: {
							Text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
						}

						NavigationLink {
                            WishKit.FeedbackListView().withNavigation()
                        } label: {
							Text("–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
						}
					}

					Section {
						NavigationLink {
							TestView()
						} label: {
							Text("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
						}
						NavigationLink {
							TestView()
						} label: {
							Text("–û—Ü–µ–Ω–∏—Ç—å")
						}
					}

					Section {
						Button {
							showingExitAlert.toggle()
						} label: {
							Text("–í—ã–π—Ç–∏")
								.foregroundStyle(.mainText)
						}
						.alert("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?", isPresented: $showingExitAlert) {
							Button(role: .cancel) {
								Constants.isLogin = false
                                UserDefaultsManager.shared.clearAllUserData()
                                KeychainManager.shared.clearAll()
                                Log.info("üö™ Exit from account")
							} label: {
								Text("–î–∞")
									.foregroundStyle(.error)
							}

							Button {
								print("Continue work in app")
							} label: {
								Text("–ù–µ—Ç")
									.foregroundStyle(.mainText)
							}
						}
						Button {
							showingDeleteAlert.toggle()
						} label: {
							Text("–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
								.foregroundStyle(.error)
						}
						.alert("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?", isPresented: $showingDeleteAlert) {

							Button(role: .cancel) {
								Constants.isLogin = false
                                UserDefaultsManager.shared.clearAllUserData()
                                Log.info("ü™ì delete account")
							} label: {
								Text("–î–∞")
									.foregroundStyle(.error)
							}

							Button {
                                Log.info("‚úèÔ∏è resume account")
							} label: {
								Text("–ù–µ—Ç")
									.foregroundStyle(.mainText)
							}
						}
					}
				}
				.scrollDisabled(true)
				.scrollContentBackground(.hidden)
				.listStyle(.insetGrouped)
			}
            .onAppear {
                viewModel.updateUserInfo()
            }
            
			.navigationTitle("–ü—Ä–æ—Ñ–∏–ª—å")
			.navigationBarTitleDisplayMode(.large)
			.frame(maxWidth: .infinity, maxHeight: .infinity)
			.background(.bg, ignoresSafeAreaEdges: .all)
		}
	}
    
    /// –•–µ–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∞
    private var header: some View {
        NavigationLink {
            ProfileDetailView()
        } label: {
            HStack {
                VStack(alignment: .leading) {
                    Text(viewModel.name + " " + viewModel.surname)
                        .font(.mediumCompact(size: 24))
                        .foregroundStyle(.black)
                    Text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
                        .font(.regularCompact(size: 17))
                        .foregroundStyle(.black)
                }
                Spacer()
                Image(systemName: "chevron.right")
                    .foregroundColor(.black)
                    .padding(.trailing, 16)
            }
            .padding(.all)
            .background(.brandCyan)
            .cornerRadius(10)
            .padding(.horizontal)
        }
    }
}

#Preview {
	ProfileView()
}
